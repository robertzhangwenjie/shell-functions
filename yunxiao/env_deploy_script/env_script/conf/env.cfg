#!/bin/bash
###
# @Author: robert zhang
# @Date: 2020-08-29 15:33:58
# @LastEditTime: 2020-08-29 20:21:06
# @LastEditors: robert zhang
# @Description: 公共变量配置脚本
# @
###


## 脚本相关变量
ENV_SCRIPT="env_script.zip"
DOWNLOAD_URL="http://package.switch.aliyun.com:8088"
ENV_SCRIPT_URL="${DOWNLOAD_URL}/upload/0/yunxiao/ATON_INTEGRATION/1/1/${ENV_SCRIPT}"

## 获取应用配置项的api地址
GET_ANTX_PROPERTIES_API="http://devops.yunxiaodemo.com/aenv-config/api/export/exportAntxProperties"
GET_ANTX_PROPERTIES_URL="${GET_ANTX_PROPERTIES_API}?appName=${APP_NAME}&antxType=${ENV_TYPE}&crid=${CRID}&group=52"

## pid存放的文件
PID_FILE=$HOME/${APP_NAME}.pid
## 脚本工作目录
WORK_DIR=$HOME
RESTORE_FILE=last_deploy_cmd.sh
RESTORE_FILE_PATH=$HOME/${RESTORE_FILE}
USER=$(whoami)
## 取用户名的后4位作为端口号
export PORT=${USER:(-4)}
ENV_PROPERTIES_FILE="${HOME}/env.properties.${APP_NAME}.${ENV_TYPE}"


## 自定义java安装路径，如果为空，则使用系统自带java版本
JAVA8_HOME="/usr/install/java8"

## 日志相关配置 ##
## 云效日志文件保存路径,3.23后的版本需要在云效配置项种修改
## 与配置项保持一致：star.agent.deploy.log.path
LOG_DIR=logs
## 系统默认路径
# LOG_DIR=env_script

## 部署应用日志文件名
APP_LOG="${APP_NAME}-${ENV_TYPE}.log"
## 部署成功或失败后获取的日志行数
LOG_LINE_NUM=100
## 程序执行的日志级别，分为DEBUG、CMD、INFO
LOG_LEVEL=CMD
[ "$LOG_LEVEL" = "DEBUG" ] && set -x
## url检查重试次数
MAX_CHECK_NUM=3


## nginx相关配置 ##
## nginx默认安装目录,如果为空则启用系统安装
NGINX_HOME=/usr/install/nginx
## 默认模板相关
NGINX_TEMPLATE_DIR=$ENV_SCRIPT_PATH/template
NGINX_TEMPLATE_DEFAULT=nginx.tpl.default
NGINX_TEMPLATE_LOCATION=nginx.tpl.location
NGINX_TEMPLATE_BACKEND=nginx.tpl.backend
NGINX_TEMPLATE_ESH=nginx.tpl.conf
## nginx配置文件名
NGINX_CONF=${APP_NAME}-${ENV_TYPE}-${USER}.conf
## 应用的nginx日志文件名
export NGINX_ERROR_LOG="error_${APP_LOG}"
export NGINX_ACCESS_LOG="access_${APP_LOG}"


## tomcat相关配置 ##
TOMCAT_PATH="/usr/install"
TOMCAT_VERSION="apache-tomcat-8.5.57"
TOMCAT_HOME="/home/${USER}/${TOMCAT_VERSION}"
TOMCAT_DOWNLOAD_URL="https://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.57/bin/apache-tomcat-8.5.57.zip"
TOMCAT_LOG="${TOMCAT_HOME}/logs/catalina.out"

## 云效用户所在组
YUNXIAO_GROUP=yunxiao

## 获取当前系统版本
if lsb_release -a | grep "Ubuntu" >/dev/null; then
  PACKAGE_INSTALL_TOOL="apt-get"
  PACKAGE_CHECK_CMD="dpkg -s"
elif lsb_release -a | grep "CentOS" >/dev/null; then
  PACKAGE_INSTALL_TOOL="yum"
  PACKAGE_CHECK_CMD="rpm -ql"
else
  echo "当前系统不兼容该程序，请使用CentOs或者Ubuntu" && exit 1
fi
readonly PACKAGE_CHECK_CMD
readonly PACKAGE_INSTALL_TOOL
log_info "当前系统发行版:\n$(lsb_release -a)"

## 检查环境
## 检查nginx是否为系统源安装
if $PACKAGE_CHECK_CMD  nginx >/dev/null 2>&1; then
  NGINX_HOME=/etc/nginx
  NGINX_CONFIG_DIR=${NGINX_HOME}/conf.d
  NGINX_SBIN_PATH=/usr/sbin/nginx
else
  NGINX_CONFIG_DIR=$NGINX_HOME/conf/conf.d
  NGINX_SBIN_PATH=${NGINX_HOME}/sbin/nginx
fi

## 打印nginx相关信息
log_info "获取nginx环境配置信息"
if eval ${NGINX_SBIN_PATH} -V > /dev/null 2>&1; then 
  echo "NGINX_HOME=${NGINX_HOME}" 
  echo "NGINX_CONFIG_DIR=${NGINX_CONFIG_DIR}"
  echo "NGINX_SBIN_PATH=${NGINX_SBIN_PATH}"
else
  log_error "nginx环境未配置"
fi

## java相关变量
if [ -z "$JAVA_HOME" ]; then
  export JAVA_HOME=${JAVA8_HOME}
  export PATH=$JAVA_HOME/bin:$PATH
  export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
fi

## 打印java信息
log_info "获取java环境信息"
java -version  || log_error "java环境未配置"

## 打印docker信息
log_info "获取docker环境信息"
docker -v || log_error "docker未安装"